<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2000</depth>
  <persistent>0</persistent>
  <parentName>obj_gui_element_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//view zoom
view_zoom_scale = 1;
view_defaultw = view_wview[0];
view_defaulth = view_hview[0];

//main selection marker
player_scanner = instance_create(0,0,obj_location_scanner);

inv_dragger_alpha = 0;


//hud data, "name", spawn object
hud_slot[0,0] = "Inventory";
hud_slot[0,1] = obj_inventory_player;
hud_slot[0,2] = noone; //instance created by the button, closes on next press if it exists
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///use the buttons on this gui element to decide if the mouse is inside it!
var mouse_clicked_me = false;

var mouse_guix = device_mouse_x_to_gui(0);
var mouse_guiy = device_mouse_y_to_gui(0);

var tile_width = -96;
var button_height = -32;
var max_tiles = 1;

if mouse_check_button_pressed(mb_left) and point_in_rectangle(mouse_guix,mouse_guiy,576+tile_width+tile_width+(0*tile_width),324+button_height,576+tile_width+(0*tile_width),324) {
    mouse_clicked_me = true;
}

//because more then one press on the above thing can trigger this!
scr_inventory_object_interaldepthcalculate(mouse_clicked_me);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Place down dirt tiles on the ground!
random_set_seed(room_height*room_width);
var bgw = background_get_width(bg_groundtiles);
var bgh = background_get_height(bg_groundtiles);


for (var i=0; i&lt;(room_width/32); i+=1)
{
    for (var t=0; t&lt;(room_height/32); t+=1)
    {
        var tlx = irandom(16) * 32;
        var tly = irandom(24) * 32; 
        tile_add(bg_groundtiles,tlx mod bgw, tly mod bgh,32,32,i*32,t*32,60);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///view preconfiguration
depth = -2000;

//lock in grid
view_xview[0] = floor(view_xview[0]);
view_yview[0] = floor(view_yview[0]);

//zoom in and out
if keyboard_check(ord("+")) or mouse_wheel_up() {
    view_zoom_scale -= 0.025;
    if view_zoom_scale &lt; 0.5 view_zoom_scale = 0.5;
}
else if keyboard_check(ord("-")) or mouse_wheel_down() {
    view_zoom_scale += 0.025;
    if view_zoom_scale &gt; 1.3 view_zoom_scale = 1.3;
}

//view scaling
view_wview[0] = view_defaultw * view_zoom_scale;
view_hview[0] = view_defaulth * view_zoom_scale;

//reset this
with global.client_top_gui_window scr_inventory_object_depthsetting(); //set the current window on top!!!
scr_inventory_object_depthordering();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_hud_basic,4,576,324);

var mouse_guix = device_mouse_x_to_gui(0);
var mouse_guiy = device_mouse_y_to_gui(0);

var tile_width = -96;
var button_height = -32;
var max_tiles = 1;

for (var i=0; i&lt;=max_tiles; i+=1) {
    if i &lt; max_tiles {
        //draw each button
        if point_in_rectangle(mouse_guix,mouse_guiy,576+tile_width+tile_width+(i*tile_width),324+button_height,576+tile_width+(i*tile_width),324) {
            //mouse over button
            if device_mouse_check_button_pressed(0,mb_left) and global.client_top_gui_window == id {
                //mouse over
                draw_sprite(spr_hud_basic,3,576+tile_width+(i*tile_width),324);
                
                //make the instance or remove it
                if instance_exists( hud_slot[i,2] ) == false {
                    hud_slot[i,2] = instance_create(0,0,hud_slot[i,1]);
                }
                else
                {
                    with hud_slot[i,2] instance_destroy();
                }
            }
            else
            {
                //pressed
                draw_sprite(spr_hud_basic,2,576+tile_width+(i*tile_width),324);
            }
        }
        else
        {
            //mouse not touching
            draw_sprite(spr_hud_basic,1,576+tile_width+(i*tile_width),324);
        }
        
        //draw button text
        draw_text(576+tile_width+tile_width+(i*tile_width)+6,324+button_height+10,hud_slot[i,0]);
    }
    else
    {
        //cap
        draw_sprite(spr_hud_basic,0,576+tile_width+(i*tile_width),324);
    }
}


//draw dragging items
if global.inventory_drag_entity != -1 {
    inv_dragger_alpha = clamp(inv_dragger_alpha + 0.01,0,0.5);
    draw_sprite_ext( scr_inventory_getobjectsprite(global.inventory_drag_entity_object) ,0,mouse_guix,mouse_guiy,0.5,0.5,0,image_blend,inv_dragger_alpha);
}
else
{
    inv_dragger_alpha = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
