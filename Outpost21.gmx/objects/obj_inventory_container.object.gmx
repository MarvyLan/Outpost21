<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_inventory_template</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>obj_inventory_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///container controls
name = "Container";
my_entity = -1;
my_object = -1;
inventory_slots_tot_max = 1; //max slots in inventory
inventory_slots_hor_max = 6; //slots in each row (based on how user resizes it!)

//gui location
Grabbed_by_mouse = false;
gui_mousegrab_offsetx = 0;
gui_mousegrab_offsety = 0;

var mouse_guix = device_mouse_x_to_gui(0);
var mouse_guiy = device_mouse_y_to_gui(0);
guix = mouse_guix-5;
guiy = mouse_guiy-5; 

//map based context container open
in_inventory = true; //by default it doesn't radius disable
out_of_inv_x = 0;
out_of_inv_y = 0;

//automatically put it on top
scr_inventory_object_depthsetting();

//call alarm
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///request inventory as needed
scr_spacket_entity_inventory_request( my_entity, id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ALL of these are dropped on right release.
Grabbed_by_mouse = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///use size of box to check if the user clicked this inventory window!
var mouse_guix = device_mouse_x_to_gui(0);
var mouse_guiy = device_mouse_y_to_gui(0);
var gui_size = 16; //tile size
var tlx = -30; //pulls alignment to one way. because i did the art in gui_sizex chunks
var tly = 0;
if inventory_slots_hor_max == 0 inventory_slots_hor_max = 1; //prevent divide by 0
var inventory_slots_ver_max = inventory_slots_tot_max div inventory_slots_hor_max;

//the entire window is the click zone
if (device_mouse_check_button_pressed(0,mb_left) 
or (device_mouse_check_button(0,mb_left) and global.inventory_drag_entity != -1))
and point_in_rectangle(mouse_guix,mouse_guiy,guix-(gui_size*2)-3 , guiy-gui_size, guix + ((inventory_slots_hor_max-1)*gui_size) + 3, guiy + gui_size + (inventory_slots_ver_max*gui_size))
and instance_exists(obj_contextmenu) == false { //do not go above context menus
    scr_inventory_object_interaldepthcalculate(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///finish off the inventory dragging, if you release it outside drop it at your feet

var mouse_guix = device_mouse_x_to_gui(0);
var mouse_guiy = device_mouse_y_to_gui(0);
var gui_size = 16; //tile size
var tlx = -30; //pulls alignment to one way. because i did the art in gui_sizex chunks
var tly = 0;
var inventory_slots_ver_max = inventory_slots_tot_max div inventory_slots_hor_max;

//the entire window is the click zone
if device_mouse_check_button_released(0,mb_left) 
and point_in_rectangle(mouse_guix,mouse_guiy,guix-(gui_size*2)-3 , guiy-gui_size, guix + ((inventory_slots_hor_max-1)*gui_size) + 3, guiy + (inventory_slots_ver_max*gui_size)) == false {

    if global.inventory_drag_entity != -1 {
        //releasing out here places at your feet!
        with obj_player {
            scr_spacket_entity_place(global.inventory_drag_entity,global.inventory_drag_objid.my_entity,x,y);   
        }
        
        //update inventory
        alarm[0] = 5;
        
        //clean
        global.inventory_drag_entity = -1;
        global.inventory_drag_entity_object = -1;
        global.inventory_drag_objid = noone;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw_gui on screen!
var mouse_guix = device_mouse_x_to_gui(0);
var mouse_guiy = device_mouse_y_to_gui(0);
var gui_size = 16; //tile size
var tlx = -30; //pulls alignment to one way. because i did the art in gui_sizex chunks
var tly = 0;
var total_true_slots = ceil(inventory_slots_tot_max/inventory_slots_hor_max)*inventory_slots_hor_max
var inventory_slots_ver_max = (inventory_slots_tot_max-1) div inventory_slots_hor_max;

//move if picked up
if Grabbed_by_mouse == true {
    guix = mouse_guix + gui_mousegrab_offsetx;
    guiy = mouse_guiy + gui_mousegrab_offsety;
    
    guix = clamp(guix,32,576 - ((inventory_slots_hor_max-1)*gui_size));
    guiy = clamp(guiy,15,324 - 64);
}

//draw loop
for (var i=0; i&lt;total_true_slots; i+=1)
{
    var hor_pos = i mod inventory_slots_hor_max;
    var ver_pos = i div inventory_slots_hor_max;
 
    var drawx = guix+tlx+(hor_pos*16);
    var drawy = guiy+tly+(ver_pos*16);
    
    //left side   
    if hor_pos == 0 {
        draw_sprite_part(spr_inventory_template,0,0,gui_size,gui_size,gui_size,drawx-gui_size,drawy); //draw left side
        if ver_pos == 0 draw_sprite_part(spr_inventory_template,0,0,0,gui_size,gui_size,drawx-gui_size,drawy-gui_size); //draw left side, top of menu
        if ver_pos == floor(inventory_slots_ver_max) draw_sprite_part(spr_inventory_template,0,0,gui_size*2,gui_size,gui_size,drawx-gui_size,drawy+gui_size); //draw left side, bottom of menu
    }
    
    //allow a grab!
    if point_in_rectangle(mouse_guix,mouse_guiy,guix+tlx-3,guiy+tly-16,guix+tlx+(gui_size*inventory_slots_hor_max+3),guiy+tly-2)
    and scr_inventory_object_is_top() and instance_exists(obj_contextmenu) == false {
        if device_mouse_check_button_pressed(0,mb_left) {
            Grabbed_by_mouse = true;
            
            gui_mousegrab_offsetx =  guix - mouse_guix;
            gui_mousegrab_offsety =  guiy - mouse_guiy;
        }
    }
    
    //draw slot itself!
    if i &lt; inventory_slots_tot_max {
        
        if point_in_rectangle(mouse_guix,mouse_guiy,drawx,drawy,drawx+gui_size-1,drawy+gui_size-1) {
            
            //if we are the topmost window
            if scr_inventory_object_is_top() and instance_exists(obj_contextmenu) == false {
                //set the tooltip
                if i &lt; inventory_sized scr_tooltip_construct(array_inventory[i,1],array_inventory[i,0]);
            
                //press check for dragging
                if device_mouse_check_button_pressed(0,mb_left) and i &lt; inventory_sized {
                    show_debug_message("Picked up for dragging entity: " + string(array_inventory[i,0]) );
                    show_debug_message(" -current id: " + string(id)); 
                    global.inventory_drag_entity = array_inventory[i,0];
                    global.inventory_drag_entity_object = array_inventory[i,1];
                    global.inventory_drag_objid = id;
                }
            
                //release check for dragging or pressing if no drag
                if device_mouse_check_button_released(0,mb_left) {
                    if global.inventory_drag_entity != -1 {
                        if global.inventory_drag_objid == id {
                            //drop the dragged thing somewhere
                            show_debug_message("Drag released entity, in same inventory: " + string(global.inventory_drag_entity) );
                            show_debug_message(" -current id: " + string(id)); 
                            
                            if i &lt; inventory_sized {
                                if global.inventory_drag_entity == array_inventory[i,0] {
                                    show_debug_message(" -is same, make context menu");
                                    //same slot because its the same entity! same inventory object too!
                                
                                    //spawn a context menu!
                                    with instance_create(0,0,obj_contextmenu) {
                                        //make a menu for the object!
                                        my_entity = other.array_inventory[i,0];
                                        my_object = other.array_inventory[i,1];
                                        my_instance = noone;
                                        storagebox_id = other.id;
                                        storagebox_entity = other.my_entity;
                                        guix = mouse_guix;
                                        guiy = mouse_guiy;
                                        
                                        //this context menu is from an inventory
                                        menu_is_inventory = true;
                                        
                                        //update context menu
                                        event_user(0);
                                    }
                                    
                                    //clean
                                    global.inventory_drag_entity = -1;
                                    global.inventory_drag_entity_object = -1;
                                    global.inventory_drag_objid = noone;
                                }
                                else
                                {
                                    show_debug_message(" -not the same, try to put inside it!");
                                    //not the same slot! so lets try to put it inside it!
                                    scr_spacket_entity_store(global.inventory_drag_entity,array_inventory[i,0]);
                                    alarm[0] = 5;
                                    
                                    //clean
                                    global.inventory_drag_entity = -1;
                                    global.inventory_drag_entity_object = -1;
                                    global.inventory_drag_objid = noone;
                                }
                            }
                            else
                            {
                                show_debug_message(" -ignoring, dropped on a voided tile.");
                                //dragged into a voided area of the inventory we are already in, reset this 
                                global.inventory_drag_entity = -1;
                                global.inventory_drag_entity_object = -1;
                                global.inventory_drag_objid = noone;
                            }
                        }
                        else
                        {
                            show_debug_message("Drag released entity, in different inventory loop: " + string(i) );
                            show_debug_message(" -current id: " + string(id)); 
                        
                            if i &lt; inventory_sized {
                                show_debug_message(" -inside item range, try to put inside item!");
                            
                                //attempt to store it inside the object in the new menu!
                                scr_spacket_entity_store(global.inventory_drag_entity,array_inventory[i,0]);
                                alarm[0] = 5;
                                
                                //clean
                                global.inventory_drag_entity = -1;
                                global.inventory_drag_entity_object = -1;
                                global.inventory_drag_objid = noone;
                            }
                            else
                            {
                                show_debug_message(" -outside item range, try to put inside new inventory!");
                            
                                //attempt to store it in this new menu!
                                scr_spacket_entity_store(global.inventory_drag_entity,my_entity);
                                alarm[0] = 5;
                                
                                //clean
                                global.inventory_drag_entity = -1;
                                global.inventory_drag_entity_object = -1;
                                global.inventory_drag_objid = noone;
                            }
                        }
                    }
                    else
                    {
                        //clean
                        global.inventory_drag_entity = -1;
                        global.inventory_drag_entity_object = -1;
                        global.inventory_drag_objid = noone;
                    }
                    
                    //draw slot
                    draw_sprite_part(spr_inventory_template,3,gui_size,gui_size,gui_size,gui_size,drawx,drawy); //draw middle, includes slots
                }
                else
                {
                    //draw slot
                    draw_sprite_part(spr_inventory_template,2,gui_size,gui_size,gui_size,gui_size,drawx,drawy); //draw middle, includes slots
                }
            }
            else 
            {
                //draw slot
                draw_sprite_part(spr_inventory_template,2,gui_size,gui_size,gui_size,gui_size,drawx,drawy); //draw middle, includes slots
            }
        }
        else
        {
            //draw slot
            draw_sprite_part(spr_inventory_template,0,gui_size,gui_size,gui_size,gui_size,drawx,drawy); //draw middle, includes slots
        }

        
        //if there is even an item that can be here
        if i &lt; inventory_sized {
            draw_sprite_ext(global.obj_sprites[| array_inventory[i,1]],0,drawx+(gui_size/2),drawy+(gui_size/2),0.5,0.5,0,image_blend,image_alpha); //draw middle, includes slots
        }
        //else
        //{
        //    draw_sprite_part(spr_inventory_template,0,gui_size,gui_size,gui_size,gui_size,drawx,drawy); //draw middle, locked impossible slot
        //}
        
    }
    else
    {
        draw_sprite_part(spr_inventory_template,1,gui_size,gui_size,gui_size,gui_size,drawx,drawy); //draw middle, locked impossible slot
    }
    
    //draw mid borders
    if ver_pos == 0 draw_sprite_part(spr_inventory_template,0,gui_size,0,gui_size,gui_size,drawx,drawy-gui_size); //draw middle, top of menu
    if ver_pos == floor(inventory_slots_ver_max) draw_sprite_part(spr_inventory_template,0,gui_size,gui_size*2,gui_size,gui_size,drawx,drawy+gui_size); //draw middle, bottom of menu
    
    
    //right side, includes quit button
    if hor_pos == inventory_slots_hor_max-1 {
        draw_sprite_part(spr_inventory_template,0,gui_size*2,gui_size,gui_size,gui_size,drawx+gui_size,drawy); //draw right side
        
        if ver_pos == 0 {
            if point_in_rectangle(mouse_guix,mouse_guiy,drawx+gui_size,drawy-gui_size,drawx+gui_size+gui_size,drawy-gui_size+gui_size) {
                //draw mouse over and clicking stuff
                if device_mouse_check_button_pressed(0,mb_left) and instance_exists(obj_contextmenu) == false {
                    draw_sprite_part(spr_inventory_template,3,gui_size*2,0,gui_size,gui_size,drawx+gui_size,drawy-gui_size); //draw right side, top of menu
                    //remove!
                    instance_destroy();
                }
                else
                {
                    draw_sprite_part(spr_inventory_template,2,gui_size*2,0,gui_size,gui_size,drawx+gui_size,drawy-gui_size); //draw right side, top of menu
                }
            }
            else
            {
                draw_sprite_part(spr_inventory_template,0,gui_size*2,0,gui_size,gui_size,drawx+gui_size,drawy-gui_size); //draw right side, top of menu
            }
        }
        if ver_pos == floor(inventory_slots_ver_max) draw_sprite_part(spr_inventory_template,0,gui_size*2,gui_size*2,gui_size,gui_size,drawx+gui_size,drawy+gui_size); //draw right side, bottom of menu
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>do not draw my real body</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
