<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_conduit_item</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_floormounted_parent</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>conduit_left = true;
conduit_right = true;
conduit_up = true;
conduit_down = true;
power_level = 0;
conduit_max_range = 20;
machine_on_me = false;
grate_sprite = spr_conduit_grate_stationA;
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//update sides
if global.client_loading = true alarm[0] = 1 else alarm[0] = irandom_range(30,40);
if constructed == true {
    //side detection and 
    var leftside = collision_rectangle(x-65,y+1,x-64,y-1,obj_puppet_conduit,false,true);
    if leftside != noone {
        conduit_left = (leftside.constructed == true);
    }
    else conduit_left = false;
    var rightside = collision_rectangle(x+64,y+1,x+65,y-1,obj_puppet_conduit,false,true);
    if rightside != noone {
        conduit_right = (rightside.constructed == true);
    }
    else conduit_right = false;
    var upside = collision_rectangle(x-1,y-65,x+1,y-64,obj_puppet_conduit,false,true);
    if upside != noone {
        conduit_up = (upside.constructed == true);
    }
    else conduit_up = false;
    var downside = collision_rectangle(x-1,y+64,x+1,y+65,obj_puppet_conduit,false,true);
    if downside != noone {
        conduit_down = (downside.constructed == true);
    }
    else conduit_down = false;
    
    //power share calculation
    if conduit_left  and leftside.power_level  &lt; (power_level-1) leftside.power_level  += 1; //charge the neighbour
    if conduit_right and rightside.power_level &lt; (power_level-1) rightside.power_level += 1; //charge the neighbour
    if conduit_up    and upside.power_level    &lt; (power_level-1) upside.power_level    += 1; //charge the neighbour
    if conduit_down  and downside.power_level  &lt; (power_level-1) downside.power_level  += 1; //charge the neighbour
    
    //floor style
    var get_floor = collision_rectangle(x-1,y-1,x+1,y+1,obj_construction_floor_parent,false,true);
    if get_floor == noone {
        grate_sprite = spr_conduit_grate_outside;
    }
    else
    {
        switch get_floor.object_index {
            default:
            case obj_floor:
                grate_sprite = spr_conduit_grate_stationA;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spin through the air
if constructed == false {
    //enable mask
    mask_index = spr_player_mask;

    event_inherited(); //perform physics calc from puppet_physics
}
else if visible == true {   
    if global.equiped_object == obj_puppet_wrench and machine_on_me == false {
        mask_index = spr_player_mask
    }
    else
    {
        mask_index = spr_nocol;
    }
    
    //clamping
    power_level = clamp(power_level - 0.025,0,conduit_max_range);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///server requested graphics update
//set draw depth
if constructed == true {
    scr_set_depth(y,9);
}
else
{
    scr_set_depth(y,1+depth_modifier);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if constructed == false {
    draw_self();
}
else
{
    //center
    draw_sprite_part(spr_conduit_pipes          ,0,16,16,32,32,x-16,y-16);
    draw_sprite(spr_conduit_nodes               ,clamp(power_level,0,10),x,y);
    draw_sprite_part(grate_sprite               ,0,16,16,32,32,x-16,y-16);
    
    if conduit_left {
        draw_sprite_part(spr_conduit_pipes          ,0,0 ,16,16,32,x-32,y-16);
        draw_sprite_part(spr_conduit_nodes          ,0,0 ,16,16,32,x-32,y-16);
        draw_sprite_part(grate_sprite               ,0,0 ,16,16,32,x-32,y-16);
    }
    
    if conduit_right {
        draw_sprite_part(spr_conduit_pipes          ,0,48,16,16,32,x+16,y-16);
        draw_sprite_part(spr_conduit_nodes          ,0,48,16,16,32,x+16,y-16);
        draw_sprite_part(grate_sprite               ,0,48,16,16,32,x+16,y-16);
    }
    
    if conduit_up {
        draw_sprite_part(spr_conduit_pipes          ,0,16, 0,32,16,x-16,y-32);
        draw_sprite_part(spr_conduit_nodes          ,0,16, 0,32,16,x-16,y-32);
        draw_sprite_part(grate_sprite               ,0,16, 0,32,16,x-16,y-32);
    }
    
    if conduit_down {
        draw_sprite_part(spr_conduit_pipes          ,0,16,48,32,16,x-16,y+16);
        draw_sprite_part(spr_conduit_nodes          ,0,16,48,32,16,x-16,y+16);
        draw_sprite_part(grate_sprite               ,0,16,48,32,16,x-16,y+16);
    }
    //draw_text(x-10,y,power_level);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
