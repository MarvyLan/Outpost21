<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_serverbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ask for the server IP and port!
input_array[0,0] = "localhost";
input_array[0,1] = 60;
input_array[1,0] = "2727";
input_array[1,1] = 5;
current_selection = -1;

///get defaults
ini_open(global.config_file_path);
    input_array[0,0] = ini_read_string("USER","LastServerAddr","localhost");
    input_array[1,0] = ini_read_string("USER","LastServerport","2727");
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_serverbox,0,x,y);

var text_ender = "";
if current_selection == 0 and current_time mod 120 &lt; 60 text_ender = "|";
var drawtext = string_copy( input_array[0,0] , max( 0 , string_length(input_array[0,0])-13 ) , min( string_length(input_array[0,0]) , 14 ) );
draw_text(x+32,y+48, drawtext + text_ender);

var text_ender = "";
if current_selection == 1 and current_time mod 120 &lt; 60 text_ender = "|";
draw_text(x+224,y+48,input_array[1,0] + text_ender);


//text boxes
if point_in_rectangle(mouse_x,mouse_y,x+32,y+48,x+208,y+64) == true {
    if mouse_check_button_pressed(mb_left) {
        current_selection = 0;
    }
}
else if point_in_rectangle(mouse_x,mouse_y,x+224,y+48,x+288,y+64) == true {
    if mouse_check_button_pressed(mb_left) {
        current_selection = 1;
    }
}
else
{
    if mouse_check_button_pressed(mb_left) current_selection = -1;
}

//typing control
if current_selection == 0 {
    input_array = scr_textbox_input(input_array,current_selection);
}
else if current_selection == 1 {
    input_array = scr_textbox_input(input_array,current_selection);
    input_array[current_selection,0] = string_copy( string_digits(input_array[current_selection,0]) , 1, 5);
}

//button press
if point_in_rectangle(mouse_x,mouse_y,x+304,y+48,x+361,y+64) == true {
    if mouse_check_button_pressed(mb_left) {
        draw_sprite(spr_confirmbutton_press,1,x+304,y+48);
    }
    else if mouse_check_button_released(mb_left) {
        draw_sprite(spr_confirmbutton_press,1,x+304,y+48);
        //do action
        if string_length(input_array[0,0]) &gt; 0 and string_length(input_array[1,0]) &gt; 0 {
            //connect to a server
            var port = real(input_array[1,0]);
            show_debug_message("Connecting to server " + string(input_array[0,0]) + " port: " + string(port));
            network_connect(global.client_socket,input_array[0,0],port);
            network_set_timeout(global.client_socket,10000,10000);
            //lock last input
            ini_open(global.config_file_path);
                ini_write_string("USER","LastServerAddr",input_array[0,0]);
                ini_write_string("USER","LastServerport",input_array[1,0]);
            ini_close();
            //done, clear entity and trigger server alarm
            with obj_client alarm[1] = 300;
            instance_destroy();
        }
    }
    else draw_sprite(spr_confirmbutton_press,0,x+304,y+48);
}



//cancel button
if point_in_rectangle(mouse_x,mouse_y,x+304,y+16,x+361,y+32) == true {
    if mouse_check_button_pressed(mb_left) {
        draw_sprite(spr_cancelbutton_press,1,x+304,y+16);
    }
    else if mouse_check_button_released(mb_left) {
        draw_sprite(spr_cancelbutton_press,1,x+304,y+16);
        //do action
        game_restart();
    }
    else draw_sprite(spr_cancelbutton_press,0,x+304,y+16);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
