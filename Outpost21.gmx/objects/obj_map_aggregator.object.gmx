<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with obj_server {
    if ds_exists(map_load_queues[other.input_connectionid],ds_type_queue) == false map_load_queues[other.input_connectionid] = ds_queue_create();
    var player_number = list_sockets[| other.input_connectionid]; 
    var player_entity = list_player[| player_number]; 

    //global.map_loading_lock_thread[ other.input_connectionid] = true; //locked on this socket!
    
    if is_undefined(player_entity) == false and is_undefined(list_entities[| player_entity]) == false 
    and ds_exists(list_entities[| player_entity],ds_type_map) {
        var ply_map = list_entities[| player_entity];
        var plx = ply_map[? "x"];
        var ply = ply_map[? "y"];
    
        //prioritize loading those around the player
        priority_list = ds_priority_create()
    
        var get_size = ds_map_size(global.map_saved_constructions);
        for (var i=0; i&lt;get_size; i+=1)
        {
            if is_undefined(global.map_saved_constructions[? string(i)]) == false
            and ds_exists(global.map_saved_constructions[? string(i)],ds_type_map) {
                var get_map = global.map_saved_constructions[? string(i)];
                ds_priority_add(priority_list, i, point_distance(plx,ply,get_map[? "x"],get_map[? "y"]));
            }
        }
        
        //padding, to stop mulching...
        //var telomer = 300;
        //while telomer &gt; 0 {
        //    ds_priority_add(priority_list, string(-1),-1);
        //    telomer -= 1;
        //}
        
        //store em in the queue in that order!!
        while(ds_priority_size(priority_list)&gt;0) {
            var pop_priority = ds_priority_delete_min(priority_list);
            ds_queue_enqueue(obj_server.map_load_queues[other.input_connectionid],pop_priority);
        }
        
        show_debug_message(" -Final queue size: " + string(ds_queue_size(map_load_queues[other.input_connectionid])));
        
        ds_priority_destroy(priority_list);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
